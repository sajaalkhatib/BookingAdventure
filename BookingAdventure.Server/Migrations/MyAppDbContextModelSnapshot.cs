// <auto-generated />
using System;
using BookingAdventure.Server.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookingAdventure.Server.Migrations
{
    [DbContext(typeof(MyAppDbContext))]
    partial class MyAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookingAdventure.Server.Models.Adventure", b =>
                {
                    b.Property<int>("AdventureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdventureId"));

                    b.Property<int?>("AdventureTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("DestinationId")
                        .HasColumnType("int");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AdventureId")
                        .HasName("PK__Adventur__D721A00EF328A61C");

                    b.HasIndex("AdventureTypeId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Adventures");
                });

            modelBuilder.Entity("BookingAdventure.Server.Models.AdventureCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CategoryId")
                        .HasName("PK__Adventur__19093A0B9B687838");

                    b.ToTable("AdventureCategories");
                });

            modelBuilder.Entity("BookingAdventure.Server.Models.AdventureDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdventureId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FaqsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HighlightsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdventureId");

                    b.ToTable("AdventureDetail");
                });

            modelBuilder.Entity("BookingAdventure.Server.Models.AdventureImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<int?>("AdventureId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ImageId")
                        .HasName("PK__Adventur__7516F70CD2664618");

                    b.HasIndex("AdventureId");

                    b.ToTable("AdventureImages");
                });

            modelBuilder.Entity("BookingAdventure.Server.Models.AdventureType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TypeId")
                        .HasName("PK__Adventur__516F03B58D70B8EF");

                    b.ToTable("AdventureTypes");
                });

            modelBuilder.Entity("BookingAdventure.Server.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<int?>("AdventureId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BookingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("NumberOfParticipants")
                        .HasColumnType("int");

                    b.Property<string>("PaymentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookingId")
                        .HasName("PK__Bookings__73951AEDFC2D384D");

                    b.HasIndex("AdventureId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("BookingAdventure.Server.Models.ContactMessage", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<DateTime?>("DateSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("MessageId")
                        .HasName("PK__ContactM__C87C0C9C2C4C74E2");

                    b.ToTable("ContactMessages");
                });

            modelBuilder.Entity("BookingAdventure.Server.Models.Destination", b =>
                {
                    b.Property<int>("DestinationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DestinationId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DestinationId")
                        .HasName("PK__Destinat__DB5FE4CC217FD7C7");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("BookingAdventure.Server.Models.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructorId"));

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("InstructorId")
                        .HasName("PK__Instruct__9D010A9B48B3209A");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("BookingAdventure.Server.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int?>("AdventureId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ReviewId")
                        .HasName("PK__Reviews__74BC79CE479F14E7");

                    b.HasIndex("AdventureId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("BookingAdventure.Server.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Img")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CC4C15EC4E49");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D10534DCE0DED0")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DestinationCategory", b =>
                {
                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("DestinationId", "CategoryId")
                        .HasName("PK__Destinat__7ACF776CD6959DD7");

                    b.HasIndex("CategoryId");

                    b.ToTable("DestinationCategories", (string)null);
                });

            modelBuilder.Entity("BookingAdventure.Server.Models.Adventure", b =>
                {
                    b.HasOne("BookingAdventure.Server.Models.AdventureType", "AdventureType")
                        .WithMany("Adventures")
                        .HasForeignKey("AdventureTypeId")
                        .HasConstraintName("FK__Adventure__Adven__5441852A");

                    b.HasOne("BookingAdventure.Server.Models.AdventureCategory", "Category")
                        .WithMany("Adventures")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__Adventure__Categ__403A8C7D");

                    b.HasOne("BookingAdventure.Server.Models.Destination", "Destination")
                        .WithMany("Adventures")
                        .HasForeignKey("DestinationId")
                        .HasConstraintName("FK__Adventure__Desti__5165187F");

                    b.HasOne("BookingAdventure.Server.Models.Instructor", "Instructor")
                        .WithMany("Adventures")
                        .HasForeignKey("InstructorId")
                        .HasConstraintName("FK__Adventure__Instr__3F466844");

                    b.Navigation("AdventureType");

                    b.Navigation("Category");

                    b.Navigation("Destination");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("BookingAdventure.Server.Models.AdventureDetail", b =>
                {
                    b.HasOne("BookingAdventure.Server.Models.Adventure", "Adventure")
                        .WithMany("AdventureDetails")
                        .HasForeignKey("AdventureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adventure");
                });

            modelBuilder.Entity("BookingAdventure.Server.Models.AdventureImage", b =>
                {
                    b.HasOne("BookingAdventure.Server.Models.Adventure", "Adventure")
                        .WithMany("AdventureImages")
                        .HasForeignKey("AdventureId")
                        .HasConstraintName("FK__Adventure__Adven__4316F928");

                    b.Navigation("Adventure");
                });

            modelBuilder.Entity("BookingAdventure.Server.Models.Booking", b =>
                {
                    b.HasOne("BookingAdventure.Server.Models.Adventure", "Adventure")
                        .WithMany("Bookings")
                        .HasForeignKey("AdventureId")
                        .HasConstraintName("FK__Bookings__Advent__47DBAE45");

                    b.HasOne("BookingAdventure.Server.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Bookings__UserId__46E78A0C");

                    b.Navigation("Adventure");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingAdventure.Server.Models.Review", b =>
                {
                    b.HasOne("BookingAdventure.Server.Models.Adventure", "Adventure")
                        .WithMany("Reviews")
                        .HasForeignKey("AdventureId")
                        .HasConstraintName("FK__Reviews__Adventu__4BAC3F29");

                    b.Navigation("Adventure");
                });

            modelBuilder.Entity("DestinationCategory", b =>
                {
                    b.HasOne("BookingAdventure.Server.Models.AdventureCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__Destinati__Categ__5812160E");

                    b.HasOne("BookingAdventure.Server.Models.Destination", null)
                        .WithMany()
                        .HasForeignKey("DestinationId")
                        .IsRequired()
                        .HasConstraintName("FK__Destinati__Desti__571DF1D5");
                });

            modelBuilder.Entity("BookingAdventure.Server.Models.Adventure", b =>
                {
                    b.Navigation("AdventureDetails");

                    b.Navigation("AdventureImages");

                    b.Navigation("Bookings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BookingAdventure.Server.Models.AdventureCategory", b =>
                {
                    b.Navigation("Adventures");
                });

            modelBuilder.Entity("BookingAdventure.Server.Models.AdventureType", b =>
                {
                    b.Navigation("Adventures");
                });

            modelBuilder.Entity("BookingAdventure.Server.Models.Destination", b =>
                {
                    b.Navigation("Adventures");
                });

            modelBuilder.Entity("BookingAdventure.Server.Models.Instructor", b =>
                {
                    b.Navigation("Adventures");
                });

            modelBuilder.Entity("BookingAdventure.Server.Models.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
